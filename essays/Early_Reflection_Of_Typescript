---
layout: essay
type: essay
title: "Early Reflection Of Typescript"
# All dates must be YYYY-MM-DD format!
date: 2025-09-04
published: true
labels:
  - Computer Engineering
---

<img width="200px" class="rounded float-start pe-4" src="..img/Screenshot 2025-09-10 141552.png">


  For the majority of my life I had no real experience in programming, my first real experience with programming was my high school robotics club. There I was kind of thrown into the world of programming and had to learn Java almost entirely by public/online sources and by asking the assistance of other school robotics clubs. Then in community college my knowledge of Java was expanded upon in my introductory course to programming, and I was taught C and C++. 

  To be honest, I think I must have developed some type of stockholm syndrom Java as my preferred coding language. But this had all changed after being shown JavaScript, and I had been told all about how JavaScript is much more useful for web development than anything else. But, I just couldn’t help but instantly click with this language, it just seemed so natural to pick up. Thankfully this trend had continued when I had begun to learn about JavaScript’s superset, TypeScript. 


## TypeScript For Software Engineers

  In my amaetur opinion I would consider TypeScript to be a more than sufficient language for software engineering. Of course the main advantage of TypeScript, especially when compared to JavaScript is in its namesake, types. Types in this language make a world of difference especially when compared to JavaScript. It allows for bugs to be found prior to the running stage and is shown in the compile stage, it shows when data is expected and when its returned, and it’s supposed to be good for large scale projects(I have yet to work on a large scale project using TypeScript so we will see if this viewpoint holds up). But as far as my current experience in TypeScript is concerned, it could be simply summed up as: “good, no serious complaints.”


## Experience With Athletic Software Engineering

  Now, when it comes to the concept of athletic software engineering, I think it’s a great idea. I think that WODs make for a great way to consistently train not only my ability, but my entire class’s ability to solve programming problems under pressure/time limit. My classmate had compared it to answering a technical question during a job interview, which I would have to agree with. Although this comparison kind of falls through depending on one’s dependency on LLM AI.

  I can speak from personal experience on using AI on WODs that it is really good at writing isolated code, really quickly but it seems to struggle to see bigger pictures and sometimes even struggles to fix issues it has made. But AI makes the stress of deconstructing exactly what to have for a WOD problem much less of an issue. The use of practice WODs as warm ups for the warm ups cannot have its usefulness overstated. It made the process of completing a graded WOD much more of a “do-able” task and allowed each project I’ve worked on so far to have some type of comparison. I hope that WODs will continue to help me learn not only TypeScript, but the entire world of software engineering.

